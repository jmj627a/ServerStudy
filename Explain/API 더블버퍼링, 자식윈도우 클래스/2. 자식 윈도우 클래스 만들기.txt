우리의 목표는 그래프 모니터링 클래스를 만드는 것입니다.

다양한 환경의 모니터링 뷰를 편리하게 변형,관리하기 위해
각각의 그래프 표현을 자식 윈도우로 할 것이며,
자식 윈도우 1개를 하나의 클래스로 만들 것입니다.

메인 윈도우 쪽에서는 자식윈도우 클래스를 동적생성 하면
자식 윈도우가 떵~ 만들어 지는 것이지요.


해당 클래스 헤더 샘플 드립니다.



- 본 클래스의 생성자에서 자식 윈도우의 생성, 그리고 자식 윈도우의 프로시저, 데이터 등을 모두 가진다.


//// 자식 윈도우 클래스 헤더 ////////////////////////////

#define dfMAXCHILD		100

class CGraphWnd
{
public:

	// 본 클래스에는 싱글라인,멀티라인,숫자표기,파이그래프 등
	// 다양한 그래프 출력을 모두 내장하고 있다.

	// 생성시 타입만을 지정하여 해당 윈도우의 그래프를 지정 해줄 것임
	// 이 타입은 내부 프로시저의 WM_PAINT 에서 분기를 통해
	// 해당 타입에 맞는 랜더 함수로 들어가게 될 것임.

	enum TYPE
	{
		LINE_SINGLE,
		LINE_MULTI,
		NUMBER,
		ONOFF,
		PIE
	};


	// 윈도우 프로시저를 직접 만들어보면 알게 되겠지만...
	// WndProc 는 함수 포인터가 윈도우 생성시 전달 되어야 한다.
	// 클래스의 맴버 함수는 this 가 존재해야 하므로 콜백 함수로 등록이 불가능 함

	// 결국 WndProc 맴버 함수는 static 으로 선언 되어야 한다.
	// 문제는 static 인 WndProc 에는 this 가 존재하지 않기 때문에 맴버변수 접근이 불가능 하다.

	// 이를 위해서 결국 윈도우 마다의 특정 고유값을 기준으로 직접 this 를 찾아서 활용하는 방법뿐이 없다.
	// 그래서 윈도우 핸들인 hwnd 값과 해당 윈도우를 만들어준 객체의 포인터를 테이블로 매칭시켜 this 를 찾아내야만 한다.
	
	// HWND 와 해당 윈도우를 만든 객체의 포인터를 맵핑시키는 구조체.
	// 이 구조체를 역시 static 배열로 보관하며, WndProc 에서는 매번 검색하여 사용한다.

	// 이는 윈도우의 user data 와 extra data 활용으로 더 간단히 해결도 가능하지만
	// 일단 api 의 힘을 빌리지 않는 언어 차원의 해결방법으로 해보도록 한다.

	typedef struct ST_HWNDtoTHIS
	{
		HWND		hWnd;
		CGraphUnit	*pThis;

	} stHWNDtoTHIS;

public:

	CGraphUnit(HINSTANCE hInstance, HWND hWndParent, TYPE enType, int iPosX, int iPosY, int iWidth, int iHeight);
	~CGraphUnit();

	/////////////////////////////////////////////////////////
	// 윈도우 프로시저
	/////////////////////////////////////////////////////////
	static LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam);

	/////////////////////////////////////////////////////////
	// 데이터 넣기.
	/////////////////////////////////////////////////////////
	BOOL	InsertData(int iData);
	
protected:
	
	//------------------------------------------------------
	// 윈도우 핸들, this 포인터 매칭 테이블 관리.
	//------------------------------------------------------
	BOOL			PutThis(void);

	static CGraphUnit	*GetThis(HWND hWnd);
	static stHWNDtoTHIS 	HWNDTable[dfMAXCHILD];

private:

	//------------------------------------------------------
	// 부모 윈도우 핸들, 내 윈도우 핸들, 인스턴스 핸들
	//------------------------------------------------------
	//------------------------------------------------------
	// 윈도우 위치,크기,색상, 그래프 타입 등.. 자료
	//------------------------------------------------------
	TYPE		_enGraphType;

	//------------------------------------------------------
	// 더블 버퍼링용 메모리 DC, 메모리 비트맵
	//------------------------------------------------------
	HDC		_hMemDC;
	HBITMAP		_hBitmap;


	//------------------------------------------------------
	// 데이터
	//------------------------------------------------------
	데이터 큐

};


위 클래스의 생성자에서 자식 윈도우를 생성시키는 코드를 넣어
본 객체 생성시 자식 윈도우가 작동으로 생성되도록 한다.

또한 해당 자식 윈도우에 필요한 그래프 출력 정보는 
모두 맴버에 보관 되어 있으므로, 자신의 그래프는 자식윈도우 자신이 모두 출력한다.

그러므로 메인윈도우 (부모윈도우) 의 WM_PAINT 에는 아무것도 할 일이 없다.

///////////////////////////////////////////////////////////



* 위 클래스의 사용법

CGraphUnit *p1;
CGraphUnit *p2;
CGraphUnit *p3;
CGraphUnit *p4;

- 임시로 포인터 변수 선언. 전역
- 실제 사용시에는 리스트,배열 등으로 별도 관리


case WM_CREATE:
  p1 = new CGraphUnit(g_hInst, hWnd, CGraphUnit::LINE_SINGLE, 10, 10, 200, 200);
  p2 = new CGraphUnit(g_hInst, hWnd, CGraphUnit::LINE_SINGLE, 220, 10, 200, 200);
  p3 = new CGraphUnit(g_hInst, hWnd, CGraphUnit::LINE_SINGLE, 430, 10, 400, 200);
  p4 = new CGraphUnit(g_hInst, hWnd, CGraphUnit::LINE_SINGLE, 10, 220, 300, 250);
  SetTimer(hWnd, 1, 100, NULL);

- 부모 왼도우 WM_CREATE 에서 자식 윈도우 클래스들 생성.
- 타이머도 생성.

이렇게 해서 4개의 자식 윈도우가 생성 되었음.
그래프 데이터의 랜덤 생성을 위해서 타이머를 지정.

자식 윈도우가 데이터를 생성하는 주체는 아니므로 데이터는
부모 윈도우가 생성 (실제로는 네트워크 수신) 하여 각 자식 윈도우에게 전달 하도록 한다.



case WM_TIMER:	
    p1->InsertData(rand() % 100);
    p2->InsertData(rand() % 100);
    p3->InsertData(rand() % 100); 
    p4->InsertData(rand() % 100);
    break;

- 타이머는 랜덤하게 데이터를 생성하여 모든 윈도우로 전송.

실제로는 네트워크를 통해 전달 받게 될 코드.




* 자식 윈도우는 데이터를 받은 뒤 자신의 InvalidateRect 를 호출하고
* 자식 윈도우 클래스 내부의 윈도우 프로시저 WM_PAINT 에서 자신의 타입에 맞게 그래프를 그린다.

지금은 싱글라인 표현만 간단히 출력 해본다.










* 자식 윈도우 생성하는 코드

_hWnd = CreateWindow(_szWindowClass, NULL, WS_CHILD | WS_VISIBLE | WS_CAPTION | WS_CLIPSIBLINGS,
						_iWindowPosX, _iWindowPosY, _iWindowWidth, _iWindowHeight, _hWndParent, NULL, _hInstance, NULL);




