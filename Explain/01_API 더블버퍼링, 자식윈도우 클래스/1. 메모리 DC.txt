안녕하세요, 프로카데미 입니다.

코로나19 확산으로  이메일 수업으로 대체 합니다.


# 메모리 DC

텍스트 콘솔 게임에서도 깜빡임을 없애기 위해 더블버퍼링을 사용 했습니다.
이는 모든 출력시 동일한 기법으로 윈도우 환경에서 그래픽 출력시도 마찬가지로 
더블 버퍼링을 사용 합니다.

- 관련내용 참고

http://soen.kr/lecture/win32api/lecnew/21-5-1.htm
http://soen.kr/lecture/win32api/lecnew/21-5-2.htm


- GDI 에서 더블버퍼링 과정

1. 화면 (윈도우 클라이언트 영역) 과 똑같은 메모리DC 생성
2. 출력 내용을 메모리 DC 로 출력
3. 메모리 DC 를 실제 화면 (윈도우) 에 출력

위의 방법으로 진행 합니다.

더블버퍼링을 사용한다면 모든 출력물은 메모리DC (가상의 화면) 에 출력하며
화면을 지우지 않고 메모리DC 내용을 그대로 윈도우에 덮어 출력 합니다.



# 메모리 DC 의 개념

메모리 DC 란  우리가 직접 메모리상에 생성시킨 DC 공간을 의미 합니다.

DC 는 그림을 출력할 디바이스(대상) 을 연결시키는 연결매체일 뿐이므로
실제 그림을 출력할 비트맵의 영역도 같이 생성을 시켜주어야만 합니다.


메모리 DC 의 생성과정은 아래와 같습니다.

1. GDI 용 Bitmap 생성
2. DC 생성
3. DC 에 Bitmap 연결

이 과정을 통해 우리만의 메모리 DC 가 생성 되었습니다.

우리가 만든 메모리 DC 는 직접만든 것이므로, GetDC 가 필요 없이
보관된 DC 핸들을 통해서 아무때고 사용이 가능합니다.

" GetDC, BeginPaint 함수를 통해서 DC 를 얻었던 것은
윈도우의 클라이언트 영역 DC 를 접근하기 위함 입니다. "


soen.kr 샘플 내용에서는 실제 그림을 그리기 위한 bitmap 만 전역변수로
보존시키며, 해당 bitmap 을 사용할 DC 는 매번 삭제,생성을 하고 있습니다.
이는 불필요한 과정이므로 우리는 bitmap 과 dc 를 1회 생성 후 계속 사용하도록 하겠습니다.



# 메모리 DC 의 실제 생성

HDC	g_hMemDC;
HBITMAP	g_hMemBitmap;

위와 같이 보관용 핸들들을 준비 합니다.

1회 생성후 계속 재사용 할 것이므로 일단 전역으로 보관 합니다.

//-------------------------------------
// 메모리DC 생성 부분
//-------------------------------------
RECT Rect;
GetClientRect(hWnd, &Rect);

HDC hdc = GetDC(hWnd);
g_hMemDC = CreateCompatibleDC(hdc);
g_hMemBitmap = CreateCompatibleBitmap(hdc, Rect.right, Rect.bottom);
SelectObject(g_hMemDC, g_hMemBitmap);
ReleaseDC(hWnd, hdc);

PatBlt(g_hMemDC, 0, 0, Rect.right, Rect.bottom, WHITENESS);


GetClientRect 함수는 윈도우의 클라이언트 영역(그림이 그려질 영역)의 크기를 얻어냅니다.
윈도우 크기와 클라이언트 영역 크기는 다르므로 이렇게 구하여 씁니다.

CreateCompatibleDC

DC 를 생성시키는 방법은 CreateDC 함수가 있지만 이는 완전 쌩 DC 를 생성하는 함수로서
지금 필요한 DC 가 아닙니다.
우리는 출력대상 (윈도우 클라이언트 영역) 과 똑같은 속성을 가진 DC 가 필요합니다.
그리하여 기존 DC 의 속성을 그대로 복사하는 CreateCompatibleDC 를 사용합니다.

인자에 들어간 윈도우 DC 와 호환되는 똑같은 속성의 DC 를 만들어 냅니다.

CreateCompatibleBitmap 또한 마찬가지 입니다. 
현재 윈도우와 똑같은 속성,색상등으로 HBITMAP 을 만들어 줄 것입니다.

위 방법으로 DC 와 Bitmap 을 만들지 않는경우
흑백 비트맵이 만들어 진다거나 제대로 된 출력이 되지 않습니다.


SelectObject 

dc 와 bitmap 을 만들었다면 이를 서로 연결시킵니다.


PatBlt 

Blt 라는 이름의 함수들은 DC 에 뭔가를 출력하는 함수들 입니다.
PatBlt 는 특정 패턴으로 DC 를 채워주는 함수로서 DC 를 WHITENESS 흰색으로 채워 지워주는 역할을 합니다.


위 과정으로 윈도우의 클라이언트 영역과 똑같은 메모리 DC 를 만들었습니다.
이는 WM_CREATE 에서 1회 생성되면 되겠습니다.




# 메모리 DC 의 파괴

//-------------------------------------
// 메모리DC 파괴 부분
//-------------------------------------
DeleteObject(g_hMemBitmap);
DeleteObject(g_hMemDC);





# 메모리 DC 의 사용

//-------------------------------------
// 메모리DC 사용 부분
//-------------------------------------
PatBlt(g_hMemDC, 0, 0, rect.right, rect.bottom, WHITENESS);

MoveToEx(g_hMemDC, ...); 
LineTo(g_hMemDC, ...);

hdc = BeginPaint(hWnd, &ps);
BitBlt(hdc, 0, 0, rect.right, rect.bottom, g_hMemDC, 0, 0, SRCCOPY);
EndPaint(hWnd, &ps);


위 코드는 WM_PAINT 부분에 작성되는 코드 입니다.

먼저 메모리 DC 를 patblt 로 깨긋하게 지우고,
메모리 DC 에 그리고자 하는 그림을 그립니다.


그리고 실제 출력 DC 를 얻어서 (BeginPaint) BitBlt 로 출력합니다.

BitBlt 는 DC 에서 DC 로의 출력 함수 입니다.

인자 : 출력대상 DC, 출력위치 x, y, 출력크기 Width,Height, 소스DC, 소스DC의 x, y, 원본 그대로 카피

이처럼 WM_PAINT 가 작성되면  더블버퍼링이 완성 된 것입니다.




# 이러면 깜빡임이 사라지는가 ?

지금 작성된 내용이면  메모리DC 클리어 > 메모리DC에 출력 > 메모리DC 를 윈도우에 출력

절차는 다 됐습니다.

그런데 실제로 그래프 출력 등의 코드에 적용시켜보면 깜빡임이 여전합니다.

깜빡임을 실제로 없애기 위해선 화면을 지우는 갱신을 하지 않아야 합니다.

WM_PAINT 발생 시점을 보면

* 윈도우가 자체적으로 발생
* 로직에 의해서 의도적으로 발생

2가지 경우 입니다.  

윈도우가 직접 발생시키는 경우는 화면 갱신이 필요하다고 판단한 경우 이므로
이때는 깜빡임이 있어도 상관이 없습니다. (화면 가려짐, 최소화 최대화 등..)

로직에 의해 의도적으로 발생 시키는 것은 InvalidateRect 함수 호출 입니다.

화면 갱신이 필요한 경우 우리는 InvalidateRect 를 호출시켜 WM_PAINT 를 발생시키고 있습니다.

InvalidateRect 의 마지막 인자인 erase flag 를 FALSE 로 넣어서 화면 지우기를 꺼야만 최종적인 더블 버퍼링의 완성 입니다.








# 윈도우 사이즈의 변경

우리가 만든 메모리DC 는 윈도우 생성시 1회 생성하였습니다.
그런데 윈도우 크기가 변경된다면 메모리 DC 의 크기도 변경이 되어야 합니다.

이를 해결하고자 한다면 윈도우 크기가 변경되는 시점에
기존 메모리 DC 를 삭제하고, 새 크기로 생성하는 코드가 들어가면 됩니다.

윈도우의 크기 변경 - WM_SIZE


이는 각자의 선택에 따라 하셔도 되고, 안하셔도 됩니다.
저의 경우는 어차피 전체화면 기준에 각 윈도우들은 고정사이즈 방식을 선택하여
윈도우 크기가 변경되지 못하도록 만들었습니다.

이런경우는  사이즈 변경에 따른 메모리DC 재생성이 필요가 없겠습니다.



# 메모리 DC 를 적용하여 타이머 그래프 출력이 깜빡임 없도록 만들어보세요




