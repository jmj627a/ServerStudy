# 레드블랙 트리 삭제

- 삭제 과정은 이진서치트리와 같음.

삭제 할 노드를 찾고, 그 자리를 대체 할 노드

   + 삭제노드의 자식이 하나 이하라면 자기 자신을 바로 삭제

   + 삭제노드에 자식이 둘이라면
       - 오른 자식의 가장 작은 노드
       - 왼 자식의 가장 큰 노드

를 찾아서 노드(데이터)를 교체 한 뒤에 최종적인 삭제 노드
(교체되어 진짜 삭제 되는 노드)에 대해서 밸런스 작업이 추가 되어야 한다.

이후부터 삭제 노드란 사용자가 삭제 하려던 데이터를 가진 노드가 아니고
지우고자 하는 데이터를 대신 하여 검색된 노드를 뜻함.


선조건, 최종 삭제 노드는 자식이 하나 이하임.(Nil제외) 두개인 상황은 없음.
 








부모로부터 내가 왼쪽인지 오른쪽인지에 따라서 분기를 나누어 작업을 해야한다.
삽입의 경우는 할아버지 기준으로 나누었으나, 삭제는 부모 기준으로 좌우를 나눔.


일단 부모 기준으로 내가 왼쪽에 있다는 조건으로 설명.



1. 삭제 노드가 레드인 경우



   추가 작업이 필요 없다.


   삭제 노드가 레드라면 부모는 블랙이다.

   삭제 노드가 레드라면 자식 노드는 블랙이다.

   레드 노드는 삭제가 되어도 블랙 밸런스에 문제가 없다.

   그러므로 삭제 노드가 레드라면 그냥 지워주면 끝.




------ 반복 검사 시작부 ------------

아래의 상황들은 실제로 삭제노드는 블랙이고, (레드면 할일이 없응께)

삭제노드의 자식노드 역시 블랙이라는 조건하에 진행.

(지운 노드의 자식이 레드다! ->  그 레드를 그냥 블랙으로 바꾸고 끝낼 수 있다)
                                   


2. 삭제 노드가 블랙인 경우

   블랙노드를 삭제하면 각 리프까지의 블랙 개수가 틀어지므로
   밸런스 작업이 필요함.

   또는 삭제노드(블랙) 의 부모와 자식이 레드인경우 삭제 후
   레드 - 레드가 되므로 문제.


   2.1 삭제 노드의 부모와 자식이 모두 레드인 경우

   2.2 삭제 노드의 형제가 레드

   2.3 삭제 노드의 형제가 블랙이고 형제의 양쪽 자식이 블랙 (부모가 레드인지 아닌지에 따라)

   2.4 삭제 노드의 형제가 블랙이고 형제의 왼자식이 레드, 오른자식은 블랙

   2.5 삭제 노드의 형제가 블랙이고 형제의 오른자식이 레드, 왼쪽이 블랙


부모기준으로 좌우의 블랙 밸런스를 맞추는게 목표.

내쪽의 블랙이 지워졌다면 형제라인의 블랙을 제거 해야함.

하지만 제거 한다는건 말이 안되므로, 회전을 통해서 우리쪽으로 블랙을 끌어온다.



-------------------------------------


   2.1 삭제 노드의 부모와 자식이 모두 레드인 경우
(또는 삭제 노드의 자식이 레드인가?)

부모와 자식이 모두 레드라면 삭제노드(블랙)이 빠짐으로
        삭제노드 라인의 블랙이 하나 줄어들고 레드 - 레드의 문제가 됨.

        삭제 노드의 자식(레드) 을 블랙으로 바꾸어줌으로 문제 해결


이는 다르게 보면 삭제노드의 자식 (밀치고 들어온 노드) 가 레드인가?
의 조건으로 한정지을 수 있다.

새로 자리한 노드가 레드라면 이를 블랙으로 바꾸는걸로 마무리 됨.





   2.2 삭제 노드의 형제가 레드


형제를 블랙으로 바꿈
부모를 기준으로 좌회전!!!
기존 부모를 레드로 바꿈.

그리고 현재노드 (삭제 후 들어온노드, 삭제노드의 자식) 기준으로 처음부터 재작업.

이 경우는 좌회전으로 삭제노드 방향이 한칸씩 내려가며
되려 더 깊이가 깊어진 상태로 재검사를 하게 됨.


+ 형제가 레드라면 형제는 블랙이 존재하는 두 자식 라인을 가지고 있게됨.
+ 이때 좌회전을 하면 형제가 부모가 되면서 형제의 기존 왼자식이 내쪽으로 넘어오게 됨
+ 이로서 형제가 블랙이 되는 상황을 만든다
? 부모가 원래 레드였으면 어떡하는가?,  형제가 레드므로 부모가 레드일 수 없음.






   2.3 삭제 노드의 형제가 블랙이고 형제의 양쪽 자식이 블랙

이때는 형제를 레드로

이걸로 내 가족 밸런스 처리는 끝. (내쪽이 블랙-1 이었음, 형제도 블랙 -1 해주었음)
하지만 내 가족 전체에서 블랙이 하나 빠졌으므로, 할아버지 입장에서는
내 부모라인으로 블랙 -1 상태가 됨.

그래서 내 부모를 기준으로 처음부터 다시 처리.
(내 부모를 삭제노드의 자식으로 봄)

? 만약, 부모가 레드였다면? (형제를 레드로 바꾸는데서 문제발생?)
어차피 부모를 기준으로 2.1 부터 다시 체크하게 되므로
삭제 노드의 자식이 레드인 조건으로 들어가서, 블랙으로 변경후 상황종료.



   2.4 삭제 노드의 형제가 블랙이고 형제의 왼자식이 레드


형제의 왼자식을 블랙으로

형제를 레드로

형제 기준으로 우회전


이걸로 2.5 상황으로 맞추어짐.


형제의 블랙을 -> 레드
형제 자식 하나를 -> 블랙

블랙으로 만든 자식을 부모로 올리고,
기존의 부모는 레드로 바꿈.



   2.5 삭제 노드의 형제가 블랙이고 형제의 오른자식이 레드


형제 컬러를 부모 컬러로.

부모 컬러는 블랙

형제의 오른자식은 블랙

부모기준 좌회원  

+ 이 상황은 형제(블랙)의 자식에 레드가 존재 함으로서
+ 간단하게 형제쪽에 블랙을 추가하여 내쪽에 블랙을 증가시킬 수 있는 상황!

+ 부모의 컬러를 형제에게 넣으므로서 회전 후 부모의 색상은 동일할 것이며
+ 기존 부모를 블랙으로 바꾸어서 이를 회전하여 삭제노드 쪽으로 넘김.
+ 이렇게 삭제된 블랙을 +1  시키고, 블랙 이었던 형제가 부모역할을 하면서
+ 형제 라인의 블랙이 -1 되었음, 이를 본래 형제의 레드자식을 블랙으로 바꿔서 해결
   