- 샘플용 서버의 종료는 U > Q   키를 누르면 종료 함.
- 정상 종료시 회원 정보를 JSON 으로 저장 함
================================================================
친구시스템 종류

팔로워방식 (트위터)

신청즉시 팔로워가 됨
상대방의 정보를 볼 뿐 쌍방향 컨텐츠는 없음.


친구방식 (페이스북)

친구요청 > 수락 or 거부

요청과 수락이라는 과정이 있으며
친구관계에선 서로 컨텐츠를 공유하며 플레이



초대시스템

카카오톡처럼 특정 플렛폼에 붙을 경우
해당 플렛폼의 다른 유저들을 해당 게임으로 초대 함

단순히 메시지를 보내는 초대라면 아주 간단하지만
일정시간 내에 초대 횟수 제한, 그리고 초대에 대한 보상처리가 대부분 들어감.



# 친구관계 처리를 위한 메시지(패킷) 종류


FriendList - 친구목록

FriendList_Request - 친구목록_요청보낸거

FriendList_Reply - 친구목록_요청받은거

FriendRemove - 친구관계 끊기

FriendRequest - 친구 요청하기

FriendCancel - 친구 요청 보낸거 취소

FriendDeny - 친구 요청 거부

FriendAgree - 친구 요청 수락


# 친구관계 테이블(저장소)

Account

AccountNo (64bit int)
ID (최대 19자의 문자열)



Friend

          FromAccountNo
          ToAccountNo

          Time

            - A 과 B 가 친구라면
             FriendMap - Key:No / Value:{No, A - B}
             FriendMap_FromIndex Key:FromAccountNo / Value:No
             FriendMap_ToIndex Key:ToAccountNo / Value:No



FriendRequest

            FromAccountNo
            ToAccountNo
            Time

----------------------------------------------------------------------

만들 프로그램

1. 회원가입 - 닉네임 문자열 받음, AccountNo 서버에서 생성.

일단 메모리에만 저장 되도록 함.

테스트를 위해서 10명 내외의 회원을 코드상에서 하드 코딩으로 기입

이는 다음 시간에 JSON 으로 저장되도록 바꿀 것임


2. 친구관련 기능 구현 (친구목록, 친구요청, 친구수락,

위의 친구관련 테이블을 Map 또는 List 로 관리


================================================================

# 스트레스 테스트 프로그램 ?

- 서버에 대량의 접속 및 메시지(패킷)을 보내서 처리속도 및 버그를 확인하는 프로그램





# 필수기능

- 100명 ~ 수천명의 접속 가능

- 특정 메시지(패킷)의 대량 전송

- 관련 정보 로그 및 확인




# 모니터링 정보

- 접속 수 (Connect 시도 수, Connect 실패 수, 연결끊김 수 )

접속 상태는 중간에 끊길 수 있으므로 수시로 반영 되어야 함


- 패킷 송신 -> 수신의 레이턴시 (평균, 최대(옵션), 최소(옵션), 초당 최대(로그저장))

- 패킷 송수신 횟수 (초당)

- 패킷 송수신 전송량 바이트 (초당)